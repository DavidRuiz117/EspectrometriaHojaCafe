#include "RTClib.h"
#include <Wire.h>
#include <Adafruit_ssd1306syp.h>
#include "AS726X.h"

AS726X sensor;
Adafruit_ssd1306syp display(21,22);
RTC_DS1307 rtc;
char daysOfTheWeek[7][12] = {"Dom", "Lun", "Mar", "Mie", "Jue", "Vie", "Sab"};

#define LOGO_WIDTH    128
#define LOGO_HEIGHT   64

const unsigned char PROGMEM logo[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xf0, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xe0, 0x3f, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xc0, 0x1f, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xc4, 0x18, 0x0f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xc4, 0x08, 0x0f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0x84, 0x08, 0x87, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x84, 0x05, 0x07, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x84, 0x06, 0x07, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x86, 0x06, 0x07, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x82, 0x04, 0x0f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0x1f, 0x83, 0x06, 0x0f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0x01, 0xc1, 0x86, 0x1f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0x00, 0x60, 0x84, 0x3f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x78, 0x00, 0x10, 0xc4, 0x70, 0x3e, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x78, 0x00, 0x0c, 0x45, 0x80, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7c, 0x00, 0x04, 0x46, 0x00, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7c, 0x00, 0x02, 0x4c, 0x00, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0x08, 0x01, 0x18, 0x00, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x06, 0x01, 0xf0, 0x00, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x03, 0x80, 0xe0, 0x21, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x80, 0xe0, 0xe0, 0xc1, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xc0, 0x7c, 0x47, 0x83, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xe0, 0x3f, 0x5e, 0x07, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf8, 0x0f, 0xfc, 0x1f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xfc, 0x07, 0xf8, 0x7f, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0x81, 0xe1, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xfc, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {
  display.initialize();                                 // Inicializa el display OLED 
  display.clear();                                      // Borra lo presentado en el display OLED
  display.setTextSize(1);                               // Fija el tamaño del texto en el display OLED 
  display.setTextColor(WHITE);                          // Fija el color del texto
  display.setCursor(0,0);                               // Fija el cursor en la posición 0,0 del display
  display.println("Estado de la planta");
  display.drawLine(0, 10, 128, 10, WHITE); 
  display.drawBitmap((display.width()-LOGO_WIDTH)/2,((display.height()-LOGO_HEIGHT)/2)+7, logo, LOGO_WIDTH, LOGO_HEIGHT, WHITE);
  display.update();                                     // Actualiza el display, para que lo que se ha enviado hasta el momento, después de borrar, se presente en pantalla.
  delay(2500);                                          // Pausa de 2 segundos, para poder ver lo presentado en pantalla  
  
  display.clear();                                      // Borra lo presentado en el display OLED
  display.setCursor(0,0);                               // Fija el cursor en la posición 0,0 del display
  display.println("Iniciando Mediciones"); 
  display.drawLine(0, 10, 128, 10, WHITE);
  display.drawBitmap((display.width()-LOGO_WIDTH)/2,((display.height()-LOGO_HEIGHT)/2)+7, logo, LOGO_WIDTH, LOGO_HEIGHT, WHITE);
  display.update();                                     // Actualiza el display, para que lo que se ha enviado hasta el momento, después de borrar, se presente en pantalla.
  delay(1500);                                          // Pausa de 2 segundos, para poder ver lo presentado en pantalla
  
  display.clear();                                      // Borra lo presentado en el display OLED
  display.setCursor(0,0);                               // Fija el cursor en la posición 0,0 del display
  display.print("Determinando Estado");
  display.drawLine(0, 10, 128, 10, WHITE);
  display.drawBitmap((display.width()-LOGO_WIDTH)/2,((display.height()-LOGO_HEIGHT)/2)+7, logo, LOGO_WIDTH, LOGO_HEIGHT, WHITE); 
  display.update();
  delay(1500); 

  Serial.begin(9600);
  Wire.begin();
  sensor.begin();
  
  if(!rtc.begin()) {
    Serial.println("Couldn't find RTC");
  }

  if(!rtc.isrunning()) {
    Serial.println("RTC is NOT running.");
    rtc.adjust(DateTime(F(_DATE), F(TIME_)));
    // rtc.adjust(DateTime(2023, 2, 03, 2, 0, 0));
  }
}

void loop() {
  sensor.takeMeasurements();
  
  if (sensor.getVersion() == SENSORTYPE_AS7263) {
    if (sensor.getCalibratedS() == 0 && sensor.getCalibratedV() == 0) {
      display.clear();
      display.setCursor(0,0);
      display.print("Esperando para obtener datos");
      display.update();
      delay (1000);
    } else {
      float NDVI_est = NDVI_eq(sensor.getCalibratedV(), sensor.getCalibratedS());
      String mensaje = EstadoPlanta(NDVI_est);
      String fecha = obtenerFecha();
      String hora = obtenerHora();
      float S = sensor.getCalibratedS();
      float V = sensor.getCalibratedV();
      
      Serial.print("Lectura: Rojo[");
      Serial.print(sensor.getCalibratedS(), 2);
      Serial.print("], NIR[");
      Serial.print(sensor.getCalibratedV(), 2);
      Serial.println(". ");
      Serial.print("NDVI estimado = ");
      Serial.println(NDVI_est);
      Serial.print("Estado: ");
      Serial.println(mensaje);
      Serial.print("Fecha: ");
      Serial.println(fecha);
      Serial.print("Hora: ");
      Serial.println(hora);
      Serial.println();
      delay(1000);

      display.initialize();
      display.clear();      
      display.setCursor(0,0);
      display.print("PLANTA DE CAFE"); 
      display.println("");

      display.print("Medida:Rojo[");
      display.print(S);
      display.println("]");
      display.print("NIR[");
      display.print(V);
      display.println("]");

      display.print("NDVI: ");
      display.println(NDVI_est);
      display.println(mensaje);
      display.print("Fecha:");
      display.println(fecha);
      display.print("hora: ");
      display.println(hora);
      display.update();
      delay(500);
      }
    }
}

float NDVI_eq(float NIR, float red) {
  float NDVI = (NIR-red)/(NIR+red); 
  return NDVI;
}

String EstadoPlanta(float NDVI) {
  String mensaje;
  
  if(NDVI >= -1 && NDVI <= 0) {
    mensaje = "Planta muerta";
  } else if(NDVI > 0 && NDVI <= 0.33) {
    mensaje = "Planta enferma";
  } else if(NDVI > 0.33 && NDVI <= 0.66) {
    mensaje = "Planta regular";
  } else if(NDVI > 0.66 && NDVI <= 1) {
    mensaje = "Planta sana";
  }
  return mensaje;
}

String obtenerFecha() {
  DateTime now = rtc.now();
  rtc.adjust(DateTime(2023, 2, 3, 15, 30, 0));
  String fecha, diaSem, dia, mes, anio;
  diaSem = String(daysOfTheWeek[now.dayOfTheWeek()]);
  dia = now.day();
  mes = now.month();
  anio = now.year();
  fecha = diaSem + "," + dia + "/" + mes + "/" + anio;
  
  return fecha;
}

String obtenerHora() {
  DateTime now = rtc.now();
  String horaR, hora, minuto;
  hora = now.hour();
  minuto = now.minute();
  horaR = hora + ":" + minuto + ".";
  
  return horaR;
}
